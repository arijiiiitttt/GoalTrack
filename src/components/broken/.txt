import { useState, useEffect } from 'react';
import { FiMoon, FiSun, FiSearch, FiCalendar, FiEdit2, FiTrash2, FiChevronDown, FiChevronUp, FiKeyboard } from 'react-icons/fi';
import flatpickr from 'flatpickr';
import 'flatpickr/dist/flatpickr.min.css';
import { SortableContainer, SortableElement } from 'react-sortable-hoc';
import confetti from 'canvas-confetti';

// Team members data
const teamMembers = [
  { id: 1, name: 'John', avatar: 'https://randomuser.me/api/portraits/men/1.jpg' },
  { id: 2, name: 'Sarah', avatar: 'https://randomuser.me/api/portraits/women/2.jpg' },
  { id: 3, name: 'Mike', avatar: 'https://randomuser.me/api/portraits/men/3.jpg' },
  { id: 4, name: 'Emily', avatar: 'https://randomuser.me/api/portraits/women/4.jpg' },
];

const TodoItem = SortableElement(({ 
  todo, 
  onToggleComplete, 
  onDelete, 
  onEdit, 
  onExpand 
}) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editText, setEditText] = useState(todo.text);
  const [isExpanded, setIsExpanded] = useState(false);

  const handleEdit = () => {
    setIsEditing(true);
  };

  const handleSave = () => {
    if (editText.trim()) {
      onEdit(todo.id, editText);
    } else {
      onDelete(todo.id);
    }
    setIsEditing(false);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSave();
    }
  };

  const toggleExpand = () => {
    setIsExpanded(!isExpanded);
    onExpand(todo.id, !isExpanded);
  };

  // Format due date
  let dueDateDisplay = '';
  let dueDateClass = '';
  if (todo.dueDate) {
    const today = new Date().toISOString().split('T')[0];
    const dueDate = new Date(todo.dueDate);
    const formattedDate = dueDate.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric',
      year: todo.dueDate.split('-')[0] !== new Date().getFullYear().toString() ? 'numeric' : undefined
    }).replace(',', '');
    
    if (todo.dueDate < today && !todo.completed) {
      dueDateDisplay = `${formattedDate} (Overdue)`;
      dueDateClass = 'text-red-500';
    } else if (todo.dueDate === today) {
      dueDateDisplay = 'Today';
      dueDateClass = 'text-yellow-500';
    } else {
      dueDateDisplay = formattedDate;
    }
  }

  // Priority color classes
  const priorityClasses = {
    low: 'bg-gray-100 text-gray-600',
    medium: 'bg-yellow-100 text-yellow-600',
    high: 'bg-red-100 text-red-600',
    critical: 'bg-purple-100 text-purple-600'
  };

  // Category color classes
  const categoryClasses = {
    work: 'bg-yellow-100 text-yellow-600',
    personal: 'bg-green-100 text-green-600',
    shopping: 'bg-purple-100 text-purple-600',
    learning: 'bg-blue-100 text-blue-600'
  };

  return (
    <li className={`flex items-center p-3 gap-3 mb-2 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 transition-all hover:-translate-y-0.5 hover:shadow-md cursor-move ${todo.completed ? 'opacity-70' : ''}`}>
      <input
        type="checkbox"
        checked={todo.completed}
        onChange={() => onToggleComplete(todo.id)}
        className="w-4 h-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800"
      />

      <div className="flex-1">
        {isEditing ? (
          <input
            type="text"
            value={editText}
            onChange={(e) => setEditText(e.target.value)}
            onBlur={handleSave}
            onKeyPress={handleKeyPress}
            autoFocus
            className="w-full p-1 border-b border-gray-300 focus:outline-none focus:border-blue-500 dark:bg-gray-800 dark:text-white"
          />
        ) : (
          <div className="flex flex-col">
            <div className={`flex items-center ${todo.completed ? 'line-through text-gray-400' : 'text-gray-800 dark:text-white'}`}>
              {todo.text}
            </div>
            <div className="flex flex-wrap items-center gap-2 mt-1 text-xs text-gray-500 dark:text-gray-400">
              {todo.priority && (
                <span className={`px-2 py-1 rounded ${priorityClasses[todo.priority]}`}>
                  {todo.priority}
                </span>
              )}
              {todo.category && (
                <span className={`px-2 py-1 rounded ${categoryClasses[todo.category]}`}>
                  {todo.category}
                </span>
              )}
              {todo.dueDate && (
                <span className={`flex items-center gap-1 ${dueDateClass}`}>
                  <FiCalendar size={12} />
                  {dueDateDisplay}
                </span>
              )}
              {todo.assignee && (
                <div className="flex items-center gap-1">
                  <img 
                    src={teamMembers.find(m => m.id === todo.assignee)?.avatar} 
                    alt="Assignee" 
                    className="w-5 h-5 rounded-full"
                  />
                  <span>{teamMembers.find(m => m.id === todo.assignee)?.name}</span>
                </div>
              )}
            </div>
            {todo.notes && isExpanded && (
              <div className="mt-2 p-2 text-sm text-gray-600 dark:text-gray-300 bg-gray-50 dark:bg-gray-700 rounded">
                {todo.notes}
              </div>
            )}
          </div>
        )}
      </div>

      <div className="flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
        {todo.notes && (
          <button 
            onClick={toggleExpand}
            className="p-1 text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
            title={isExpanded ? "Collapse notes" : "Expand notes"}
          >
            {isExpanded ? <FiChevronUp size={16} /> : <FiChevronDown size={16} />}
          </button>
        )}
        <button 
          onClick={handleEdit}
          className="p-1 text-gray-500 hover:text-blue-500"
          title="Edit"
        >
          <FiEdit2 size={16} />
        </button>
        <button 
          onClick={() => onDelete(todo.id)}
          className="p-1 text-gray-500 hover:text-red-500"
          title="Delete"
        >
          <FiTrash2 size={16} />
        </button>
      </div>
    </li>
  );
});

const TodoList = SortableContainer(({ 
  todos, 
  onToggleComplete, 
  onDelete, 
  onEdit,
  onExpand
}) => {
  return (
    <ul className="mb-4">
      {todos.map((todo, index) => (
        <TodoItem
          key={`item-${todo.id}`}
          index={index}
          todo={todo}
          onToggleComplete={onToggleComplete}
          onDelete={onDelete}
          onEdit={onEdit}
          onExpand={onExpand}
        />
      ))}
    </ul>
  );
});

const TodoApp = () => {
  const [todos, setTodos] = useState([]);
  const [inputText, setInputText] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [currentFilter, setCurrentFilter] = useState('all');
  const [currentCategory, setCurrentCategory] = useState('all');
  const [currentPriority, setCurrentPriority] = useState('medium');
  const [dueDate, setDueDate] = useState('');
  const [notes, setNotes] = useState('');
  const [selectedAssignee, setSelectedAssignee] = useState('');
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [showShortcuts, setShowShortcuts] = useState(false);

  // Initialize flatpickr for due date input
  useEffect(() => {
    flatpickr("#due-date-input", {
      dateFormat: "Y-m-d",
      minDate: "today",
      onChange: (selectedDates, dateStr) => {
        setDueDate(dateStr);
      }
    });
  }, []);

  // Load todos from localStorage
  useEffect(() => {
    const savedTodos = localStorage.getItem('todos');
    if (savedTodos) {
      setTodos(JSON.parse(savedTodos));
    }

    const savedDarkMode = localStorage.getItem('darkMode') === 'true';
    setDarkMode(savedDarkMode);
  }, []);

  // Save todos to localStorage when they change
  useEffect(() => {
    localStorage.setItem('todos', JSON.stringify(todos));
  }, [todos]);

  // Toggle dark mode
  const toggleDarkMode = () => {
    const newDarkMode = !darkMode;
    setDarkMode(newDarkMode);
    localStorage.setItem('darkMode', newDarkMode);
  };

  // Add new todo
  const addTodo = () => {
    if (!inputText.trim()) return;

    const today = new Date().toISOString().split('T')[0];
    const isDueToday = dueDate === today;

    const newTodo = {
      id: Date.now(),
      text: inputText,
      completed: false,
      category: currentCategory !== 'all' ? currentCategory : null,
      priority: currentPriority,
      dueDate,
      isDueToday,
      notes: notes.trim() || null,
      assignee: selectedAssignee || null,
      createdAt: new Date().toISOString()
    };

    setTodos([newTodo, ...todos]);
    resetInputForm();
  };

  // Reset input form
  const resetInputForm = () => {
    setInputText('');
    setDueDate('');
    setNotes('');
    setSelectedAssignee('');
    setCurrentCategory('all');
    setCurrentPriority('medium');
    setShowAdvanced(false);
  };

  // Toggle todo completion
  const toggleComplete = (id) => {
    const updatedTodos = todos.map(todo =>
      todo.id === id ? { ...todo, completed: !todo.completed } : todo
    );
    setTodos(updatedTodos);

    // Celebrate if all tasks completed
    if (updatedTodos.every(t => t.completed) && updatedTodos.length > 0) {
      confetti({
        particleCount: 150,
        spread: 70,
        origin: { y: 0.6 }
      });
    }
  };

  // Delete todo
  const deleteTodo = (id) => {
    if (window.confirm('Are you sure you want to delete this task?')) {
      setTodos(todos.filter(todo => todo.id !== id));
    }
  };

  // Edit todo text
  const editTodo = (id, newText) => {
    setTodos(todos.map(todo =>
      todo.id === id ? { ...todo, text: newText } : todo
    ));
  };

  // Toggle expanded notes
  const toggleExpand = (id, expanded) => {
    setTodos(todos.map(todo =>
      todo.id === id ? { ...todo, expanded } : todo
    ));
  };

  // Clear all completed todos
  const clearCompleted = () => {
    const completedTodos = todos.filter(todo => todo.completed);
    if (completedTodos.length === 0) {
      alert('No completed tasks to clear');
      return;
    }

    if (window.confirm(`Are you sure you want to delete ${completedTodos.length} completed tasks?`)) {
      setTodos(todos.filter(todo => !todo.completed));
    }
  };

  // Archive completed todos
  const archiveCompleted = () => {
    const completedTodos = todos.filter(todo => todo.completed);
    if (completedTodos.length === 0) {
      alert('No completed tasks to archive');
      return;
    }

    if (window.confirm(`Archive ${completedTodos.length} completed tasks?`)) {
      const archived = JSON.parse(localStorage.getItem('archived')) || [];
      localStorage.setItem('archived', JSON.stringify([...archived, ...completedTodos]));
      setTodos(todos.filter(todo => !todo.completed));
      alert(`${completedTodos.length} tasks archived`);
    }
  };

  // Handle sorting
  const onSortEnd = ({ oldIndex, newIndex }) => {
    const newTodos = [...todos];
    const [removed] = newTodos.splice(oldIndex, 1);
    newTodos.splice(newIndex, 0, removed);
    setTodos(newTodos);
  };

  // Filter todos based on current filters
  const filteredTodos = todos.filter(todo => {
    // Apply search filter
    if (searchQuery && !todo.text.toLowerCase().includes(searchQuery.toLowerCase())) {
      return false;
    }
    
    // Apply category filter
    if (currentCategory !== 'all' && todo.category !== currentCategory) {
      return false;
    }
    
    // Apply status filter
    switch (currentFilter) {
      case 'active': return !todo.completed;
      case 'completed': return todo.completed;
      case 'today': return todo.dueDate === new Date().toISOString().split('T')[0];
      default: return true;
    }
  });

  // Calculate stats
  const totalTodos = todos.length;
  const remainingTodos = todos.filter(todo => !todo.completed).length;
  const todayDueTodos = todos.filter(todo => {
    const today = new Date().toISOString().split('T')[0];
    return todo.dueDate === today && !todo.completed;
  }).length;
  const highPriorityTodos = todos.filter(todo => todo.priority === 'high' && !todo.completed).length;
  const progressPercentage = totalTodos > 0 ? ((totalTodos - remainingTodos) / totalTodos) * 100 : 0;

  return (
    <div className={`min-h-screen ${darkMode ? 'dark' : ''}`}>
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-800 dark:text-gray-200 transition-colors duration-200">
        <div className="container mx-auto px-4 py-8 max-w-3xl">
          <header className="mb-8">
            <div className="flex justify-between items-center mb-2">
              <h1 className="text-3xl font-bold text-gray-800 dark:text-white">TeamTask Pro</h1>
              <div className="flex gap-3">
                <button
                  onClick={toggleDarkMode}
                  className="p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                  title={darkMode ? "Switch to light mode" : "Switch to dark mode"}
                >
                  {darkMode ? <FiSun size={20} /> : <FiMoon size={20} />}
                </button>
                <button
                  onClick={() => setShowShortcuts(true)}
                  className="p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                  title="Keyboard shortcuts"
                >
                  <FiKeyboard size={20} />
                </button>
              </div>
            </div>
            <p className="text-gray-600 dark:text-gray-400">Collaborate and organize your team's work</p>
          </header>

          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-md border border-gray-200 dark:border-gray-700 p-6 mb-6">
            {/* Quick Add Section */}
            <div className="flex items-center gap-3 mb-4">
              <div className="w-4 h-4 border border-gray-300 rounded opacity-40"></div>
              <input
                type="text"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && addTodo()}
                placeholder="Add a task... (Press '/' for options)"
                className="flex-1 py-2 px-0 border-0 focus:ring-0 focus:outline-none dark:bg-gray-800"
              />
              <button
                onClick={addTodo}
                className="px-4 py-2 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 rounded-lg text-gray-700 dark:text-gray-200 transition-colors"
              >
                Add Task
              </button>
            </div>

            {/* Advanced Input Section */}
            {showAdvanced && (
              <div className="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg mb-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Project</label>
                    <select
                      value={currentCategory}
                      onChange={(e) => setCurrentCategory(e.target.value)}
                      className="w-full p-2 border border-gray-300 rounded-lg dark:bg-gray-800 dark:border-gray-600"
                    >
                      <option value="all">No category</option>
                      <option value="work">Work</option>
                      <option value="personal">Personal</option>
                      <option value="shopping">Shopping</option>
                      <option value="learning">Learning</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Assignee</label>
                    <select
                      value={selectedAssignee}
                      onChange={(e) => setSelectedAssignee(e.target.value)}
                      className="w-full p-2 border border-gray-300 rounded-lg dark:bg-gray-800 dark:border-gray-600"
                    >
                      <option value="">Unassigned</option>
                      {teamMembers.map(member => (
                        <option key={member.id} value={member.id}>
                          {member.name}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>

                <div className="mb-3">
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Priority</label>
                  <div className="flex gap-2">
                    {['low', 'medium', 'high', 'critical'].map(priority => (
                      <button
                        key={priority}
                        onClick={() => setCurrentPriority(priority)}
                        className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${
                          currentPriority === priority 
                            ? priority === 'low' 
                              ? 'bg-gray-600 text-white' 
                              : priority === 'medium' 
                                ? 'bg-yellow-500 text-white' 
                                : priority === 'high' 
                                  ? 'bg-red-500 text-white' 
                                  : 'bg-purple-500 text-white'
                            : priority === 'low' 
                              ? 'bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300' 
                              : priority === 'medium' 
                                ? 'bg-yellow-100 text-yellow-600 dark:bg-yellow-900 dark:text-yellow-200' 
                                : priority === 'high' 
                                  ? 'bg-red-100 text-red-600 dark:bg-red-900 dark:text-red-200' 
                                  : 'bg-purple-100 text-purple-600 dark:bg-purple-900 dark:text-purple-200'
                        }`}
                      >
                        {priority.charAt(0).toUpperCase() + priority.slice(1)}
                      </button>
                    ))}
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Due Date</label>
                    <input
                      id="due-date-input"
                      type="text"
                      placeholder="Select date"
                      className="w-full p-2 border border-gray-300 rounded-lg dark:bg-gray-800 dark:border-gray-600"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Notes</label>
                  <textarea
                    value={notes}
                    onChange={(e) => setNotes(e.target.value)}
                    placeholder="Add details..."
                    className="w-full p-2 border border-gray-300 rounded-lg dark:bg-gray-800 dark:border-gray-600 min-h-[80px]"
                  />
                </div>
              </div>
            )}

            {/* Controls */}
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-4 pb-4 border-b border-gray-200 dark:border-gray-700">
              <div className="flex flex-col md:flex-row gap-4 w-full md:w-auto">
                <div className="relative w-full md:w-48">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <FiSearch className="text-gray-400" />
                  </div>
                  <input
                    type="text"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="Search tasks..."
                    className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg dark:bg-gray-800 dark:border-gray-600"
                  />
                </div>

                <div className="flex gap-4">
                  {['all', 'active', 'completed', 'today'].map(filter => (
                    <button
                      key={filter}
                      onClick={() => setCurrentFilter(filter)}
                      className={`relative px-1 py-1 text-sm font-medium transition-colors ${
                        currentFilter === filter 
                          ? 'text-gray-800 dark:text-white' 
                          : 'text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
                      }`}
                    >
                      {filter.charAt(0).toUpperCase() + filter.slice(1)}
                      {currentFilter === filter && (
                        <span className="absolute bottom-0 left-0 w-full h-0.5 bg-blue-500"></span>
                      )}
                    </button>
                  ))}
                </div>
              </div>

              <div className="flex gap-2 w-full md:w-auto">
                <button
                  onClick={archiveCompleted}
                  className="px-3 py-1.5 bg-blue-50 hover:bg-blue-100 dark:bg-blue-900 dark:hover:bg-blue-800 text-blue-600 dark:text-blue-200 rounded-lg text-sm font-medium transition-colors"
                >
                  Archive Completed
                </button>
                <button
                  onClick={clearCompleted}
                  className="px-3 py-1.5 bg-red-50 hover:bg-red-100 dark:bg-red-900 dark:hover:bg-red-800 text-red-600 dark:text-red-200 rounded-lg text-sm font-medium transition-colors"
                >
                  Clear Completed
                </button>
              </div>
            </div>

            {/* Project Filters */}
            <div className="flex flex-wrap gap-2 mb-4">
              {['all', 'work', 'personal', 'shopping', 'learning'].map(category => (
                <button
                  key={category}
                  onClick={() => setCurrentCategory(category)}
                  className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${
                    currentCategory === category
                      ? category === 'all'
                        ? 'bg-gray-800 text-white dark:bg-gray-200 dark:text-gray-800'
                        : category === 'work'
                          ? 'bg-yellow-500 text-white'
                          : category === 'personal'
                            ? 'bg-green-500 text-white'
                            : category === 'shopping'
                              ? 'bg-purple-500 text-white'
                              : 'bg-blue-500 text-white'
                      : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300'
                  }`}
                >
                  {category.charAt(0).toUpperCase() + category.slice(1)}
                </button>
              ))}
            </div>

            {/* Todo List */}
            {filteredTodos.length > 0 ? (
              <TodoList
                todos={filteredTodos}
                onSortEnd={onSortEnd}
                onToggleComplete={toggleComplete}
                onDelete={deleteTodo}
                onEdit={editTodo}
                onExpand={toggleExpand}
                useDragHandle
                lockAxis="y"
              />
            ) : (
              <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                <svg
                  className="mx-auto h-16 w-16 opacity-30 mb-4"
                  viewBox="0 0 80 80"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                >
                  <path d="M20 30H60V50H20V30Z" />
                  <path d="M30 30H50V60H30V30Z" />
                  <path d="M40 10V20" />
                  <path d="M20 20L25 25" />
                  <path d="M60 20L55 25" />
                </svg>
                <p>
                  {searchQuery
                    ? "No tasks match your search"
                    : currentCategory !== "all"
                    ? `No tasks in ${currentCategory} category`
                    : currentFilter === "active"
                    ? "No active tasks"
                    : currentFilter === "completed"
                    ? "No completed tasks"
                    : currentFilter === "today"
                    ? "No tasks due today"
                    : "No tasks yet"}
                </p>
              </div>
            )}

            {/* Stats */}
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 pt-4 border-t border-gray-200 dark:border-gray-700">
              <div className="flex items-center gap-4">
                <span className="text-sm text-gray-600 dark:text-gray-400">
                  {remainingTodos} {remainingTodos === 1 ? "task" : "tasks"} left
                </span>
                <div className="w-24 h-1 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                  <div
                    className="h-full bg-blue-500"
                    style={{ width: `${progressPercentage}%` }}
                  ></div>
                </div>
              </div>
              <div className="flex gap-4 text-sm">
                <span className="flex items-center gap-1 text-gray-600 dark:text-gray-400">
                  <span>⏰</span> {todayDueTodos} due today
                </span>
                <span className="flex items-center gap-1 text-gray-600 dark:text-gray-400">
                  <span>⚠️</span> {highPriorityTodos} high priority
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Keyboard Shortcuts Modal */}
      {showShortcuts && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-xl max-w-md w-full mx-4">
            <div className="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700">
              <h3 className="text-lg font-semibold">Keyboard Shortcuts</h3>
              <button
                onClick={() => setShowShortcuts(false)}
                className="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 text-2xl"
              >
                &times;
              </button>
            </div>
            <div className="p-4">
              <div className="flex items-center py-2 border-b border-gray-100 dark:border-gray-700">
                <span className="w-16 font-medium">/</span>
                <span>Add category</span>
              </div>
              <div className="flex items-center py-2 border-b border-gray-100 dark:border-gray-700">
                <span className="w-16 font-medium">!</span>
                <span>Add priority</span>
              </div>
              <div className="flex items-center py-2 border-b border-gray-100 dark:border-gray-700">
                <span className="w-16 font-medium">@</span>
                <span>Add assignee</span>
              </div>
              <div className="flex items-center py-2 border-b border-gray-100 dark:border-gray-700">
                <span className="w-16 font-medium">Enter</span>
                <span>Add task</span>
              </div>
              <div className="flex items-center py-2">
                <span className="w-16 font-medium">Esc</span>
                <span>Close modal</span>
              </div>
            </div>
          </div/>
        </div>
      )}
    </div>
  );
};

export default TodoApp;